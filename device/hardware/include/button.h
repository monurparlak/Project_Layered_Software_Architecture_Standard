/**
 * @file    button.h
 * @author  Onur
 * @date    2025-07-04
 * @brief   Public interface for a generic button module for embedded systems.
 *
 * This module defines the public API for initializing, reading and managing
 * digital push-buttons using polling and callback mechanisms. Designed with
 * hardware abstraction, portability, and modularity in mind, it conforms to
 * MISRA C and Barr-C standards for reliable embedded development.
 * 
 */

#ifndef BUTTON_H_
#define BUTTON_H_

#ifdef __cplusplus
extern "C" {
#endif

/*-----------------------------------------------------------------------------
 *                               INCLUDES
 *---------------------------------------------------------------------------*/
#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdlib.h>

/*-----------------------------------------------------------------------------
 *                               MACROS
 *---------------------------------------------------------------------------*/

/* No macros defined in this version */

/*-----------------------------------------------------------------------------
 *                               ENUMERATIONS
 *---------------------------------------------------------------------------*/

/**
 * @brief Represents the current logical state of the button.
 * 
 */
typedef enum {
    BUTTON_STATE_RELEASED = 0,  /**< Button is not being pressed */
    BUTTON_STATE_PRESSED        /**< Button is actively pressed */

} button_state_e;

/**
 * @brief Event types generated by button transitions.
 * 
 */
typedef enum {
    BUTTON_EVENT_NONE = 0,
    BUTTON_EVENT_PRESSED,
    BUTTON_EVENT_RELEASED

} button_event_e;

/*-----------------------------------------------------------------------------
 *                               TYPEDEFS & STRUCTURES
 *---------------------------------------------------------------------------*/

/**
 * @brief Function pointer type for event callbacks.
 * 
 */
typedef void (*button_callback_t)(button_event_e event);

/**
 * @brief Structure to configure a button instance.
 * 
 */
typedef struct {
    uint8_t gpio_pin;   /**< GPIO pin number associated with button */
    bool active_low;    /**< Logic level when button is considered "pressed" */
    button_callback_t callback; /**< Callback function to handle events */

} button_config_t;

/**
 * @brief Internal handle representing a button instance.
 * 
 */
typedef struct {
    button_config_t config;     /**< User-defined configuration */
    button_state_e last_state;  /**< Last known state of button */
    bool is_initialized;        /**< Initialization status flag */

} button_handle_t;

/*-----------------------------------------------------------------------------
 *                       PUBLIC FUNCTION DECLARATIONS
 *---------------------------------------------------------------------------*/

/**
 * @brief Initializes the button module for a specific instance.
 *
 * This function must be called before using any other button functions.
 * It configures the GPIO pin and stores user-specified parameters.
 *
 * @param[in,out] handle Pointer to a button handle structure.
 * @param[in]     config Pointer to a configuration structure.
 *
 * @retval true   Initialization successful.
 * @retval false  Failed due to null pointers or invalid configuration.
 * 
 */
bool button_init(button_handle_t *handle, const button_config_t *config);

/**
 * @brief Reads the current state of the button in logical form.
 *
 * @param[in] handle Pointer to a valid, initialized button handle.
 *
 * @return BUTTON_STATE_PRESSED if pressed, otherwise BUTTON_STATE_RELEASED.
 * 
 */
button_state_e button_read(const button_handle_t *handle);

/**
 * @brief Main polling function to detect state transitions and fire callbacks.
 *
 * This function must be called periodically to monitor button state and
 * notify the application layer via callback when changes occur.
 *
 * @param[in,out] handle Pointer to an initialized button handle.
 * 
 */
void button_task(button_handle_t *handle);

#ifdef __cplusplus
}
#endif

#endif /* BUTTON_H_ */

// End of file
